//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "Predictor.h"
#include "PredictorFactory.h"
#include "ResponseDB.h"
#include <string>
#include <iostream>
using std::string;
using std::cerr;

Define_Module(Predictor);

void Predictor::initialize()
{
    string method(par("method").stringValue());

    EV << "Loading " << method << " predictor\n";

    // Build predictor
    m_predictor = PredictorFactory::instance().build(method);

    // Register to prediction event on local scheduler and inPort
}

void Predictor::handleMessage(cMessage *msg)
{
    // TODO - Generated method body
}

bool Predictor::CheckIfHit(SessionMeta *meta) {
    bool isHit = false;

    PredictionTable::iterator prediction = m_predictionTable.find(meta);
    if(prediction != m_predictionTable.end()) {
        PredictionInterval interval = prediction->second;
        simulation_t now = cSimulation::getActiveSimulation()->getSimTime();

        if((now >= interval.first)  && (now <= interval.second)) {
            isHit = true;
        } else {
            isHit = false;
        }
    }

    return isHit;
}

bool Predictor::Hit(NoCFlitMsg* msg) {
    bool isHit = false;
    int msgId = msg->getId();
    SessionMeta *meta = ResponseDB::getInstance()->find(msgId);
    if(meta->isResponse(msgId)) {
        isHit = CheckIfHit(meta);
    } else {
        cerr << "Trying to match a hit to a non response message :( \n";
    }
    return isHit;
}
