//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "Predictor.h"
#include "PredictorFactory.h"
#include "ResponseDB.h"
#include <string>
#include <iostream>
using std::string;
using std::cerr;

Define_Module(Predictor);

void Predictor::initialize()
{
    string method(par("method").stringValue());

    EV << "Loading " << method << " predictor\n";

    // Build predictor
    m_predictor = PredictorFactory::instance().build(method);

    m_numVCs = getParentModule()->getSubmodule("inPort")->par("numVCs");

    m_VCHit.resize(m_numVCs);
    for(int i=0; i < m_numVCs; ++i) {

    }

//    cModule *opCalc = getParentModule()->getSubmodule("opCalc");
//    cModule *vcCalc = getParentModule()->getSubmodule("vcCalc");
//    cModule *sched  = getParentModule()->getSubmodule("sched");
//
//
//    if(NULL == inPort || NULL == opCalc || NULL == vcCalc || NULL == sched) {
//        throw cRuntimeError(getParentModule(), "Can't find one of the main modules for the port");
//    }
//
//    m_inPort = check_and_cast<InPortSync*>(inPort);
//    m_opCalc = check_and_cast<XYOPCalc*>(opCalc);
//    m_vcCalc = check_and_cast<FLUVCCalc*>(vcCalc);
//    m_sched = check_and_cast<SchedSync*>(vcCalc);
}

void Predictor::handleMessage(cMessage *msg)
{
    // TODO - Generated method body
}

bool Predictor::CheckIfHit(SessionMeta *meta) {
    bool isHit = false;

    PredictionTable::iterator prediction = m_predictionTable.find(meta);
    if(prediction != m_predictionTable.end()) {
        PredictionInterval interval = prediction->second;
        simtime_t now = cSimulation::getActiveSimulation()->getSimTime();

        if((now >= interval.first)  && (now <= interval.second)) {
            isHit = true;
        } else {
            isHit = false;
        }

        m_predictionTable.erase(prediction);
    }

    return isHit;
}

void Predictor::HitFlow(NoCFlitMsg* msg, SessionMeta* meta) {
/**
 * 1.
 */


}





bool Predictor::Hit(NoCFlitMsg* msg) {
    bool isHit = false;
    int msgId = msg->getId();
    SessionMeta *meta = ResponseDB::getInstance()->find(msgId);
    if(meta->isResponse(msgId)) {
        isHit = CheckIfHit(meta);

//        if(true == isHit) { // Start Hit flow
//            HitFlow(msg, meta);
//        }

    } else {
        cerr << "Trying to match a hit to a non response message :( \n";
    }
    return isHit;
}
